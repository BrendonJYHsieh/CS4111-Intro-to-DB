-- System table
CREATE TABLE System (
    portfolio_id BIGINT PRIMARY KEY
);

-- Portfolio table
CREATE TABLE Portfolio (
    portfolio_id BIGINT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    FOREIGN KEY (portfolio_id) REFERENCES System(portfolio_id),
    CONSTRAINT portfolio_name_unique UNIQUE (name),
    CONSTRAINT portfolio_name_check CHECK (length(name) > 0)
);

-- Strategy table
CREATE TABLE Strategy (
    strategy_id VARCHAR(255) PRIMARY KEY,
    direction VARCHAR(255) NOT NULL,
    symbol VARCHAR(255) NOT NULL,
    portfolio_id BIGINT NOT NULL,
    FOREIGN KEY (portfolio_id) REFERENCES Portfolio(portfolio_id),
    CONSTRAINT strategy_direction_check CHECK (direction IN ('long', 'short', 'neutral')),
    CONSTRAINT strategy_symbol_check CHECK (length(symbol) > 0)
);


-- Trade_Order table
CREATE TABLE Trade_Order (
    order_id VARCHAR(255) PRIMARY KEY,
    time TIMESTAMP NOT NULL,
    strategy_id VARCHAR(255) NOT NULL,
    price DOUBLE PRECISION NOT NULL,
    qty DOUBLE PRECISION NOT NULL,
    side VARCHAR(255) NOT NULL,
    symbol VARCHAR(255) NOT NULL,
    FOREIGN KEY (strategy_id) REFERENCES Strategy(strategy_id),
    CONSTRAINT order_price_check CHECK (price > 0),
    CONSTRAINT order_qty_check CHECK (qty > 0),
    CONSTRAINT order_side_check CHECK (side IN ('buy', 'sell'))
);

-- Log table
CREATE TABLE Log (
    log_id INT PRIMARY KEY,
    time TIMESTAMP NOT NULL,
    message VARCHAR(255) NOT NULL,
    portfolio_id BIGINT NOT NULL,
    FOREIGN KEY (portfolio_id) REFERENCES Portfolio(portfolio_id),
    CONSTRAINT log_message_check CHECK (length(message) > 0)
);

-- Portfolio Snapshot table
CREATE TABLE Portfolio_Snapshot (
    portfolio_id BIGINT,
    time TIMESTAMP,
    fund DOUBLE PRECISION NOT NULL,
    leverage DOUBLE PRECISION NOT NULL,
    position DOUBLE PRECISION NOT NULL,
    order_value DOUBLE PRECISION NOT NULL,
    PRIMARY KEY (portfolio_id, time),
    CONSTRAINT portfolio_snapshot_fund_check CHECK (fund >= 0)
);

-- Trade table
CREATE TABLE Trade (
    trade_id VARCHAR(255) PRIMARY KEY,
    time TIMESTAMP NOT NULL,
    strategy_id VARCHAR(255) NOT NULL,
    price DOUBLE PRECISION NOT NULL,
    qty DOUBLE PRECISION NOT NULL,
    side VARCHAR(255) NOT NULL,
    symbol VARCHAR(255) NOT NULL,
    volume DOUBLE PRECISION NOT NULL,
    FOREIGN KEY (strategy_id) REFERENCES Strategy(strategy_id),
    CONSTRAINT trade_price_check CHECK (price > 0),
    CONSTRAINT trade_qty_check CHECK (qty > 0),
    CONSTRAINT trade_volume_check CHECK (volume > 0),
    CONSTRAINT trade_side_check CHECK (side IN ('buy', 'sell')),
    CONSTRAINT trade_volume_equals_price_qty CHECK (abs(volume - (price * qty)) < 0.01)
);

-- 1. Adding a TEXT attribute for full-text search
CREATE TABLE Strategy_Analysis (
    analysis_id SERIAL PRIMARY KEY,
    strategy_id VARCHAR(255) NOT NULL,
    analysis_text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (strategy_id) REFERENCES Strategy(strategy_id)
);
-- Create a GIN index for full-text search
CREATE INDEX idx_strategy_analysis_text ON Strategy_Analysis USING GIN (to_tsvector('english', analysis_text));

-- 2. Adding an array attribute
ALTER TABLE Strategy ADD COLUMN historical_symbols VARCHAR(255)[] DEFAULT '{}';

-- 3. Create a composite type and a table of that type
CREATE TYPE trade_summary_type AS (
    symbol VARCHAR(255),
    avg_price DOUBLE PRECISION,
    total_qty DOUBLE PRECISION,
    total_volume DOUBLE PRECISION
);

CREATE TABLE Trade_Summary OF trade_summary_type (
    symbol PRIMARY KEY,
    CONSTRAINT avg_price_check CHECK (avg_price > 0),
    CONSTRAINT total_qty_check CHECK (total_qty > 0),
    CONSTRAINT total_volume_check CHECK (total_volume > 0)
);